<?xml version="1.0" encoding="utf-8"?>
<!--
    Copyright 2023 Paranoid Android

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->
<resources>

    <!-- Whether device has an alert slider. -->
    <bool name="config_hasAlertSlider">false</bool>

    <!-- Paths to the libraries that contain device specific key handlers -->
    <string-array name="config_deviceKeyHandlerLibs" translatable="false">
    </string-array>

    <!-- Names of the key handler classes -->
    <string-array name="config_deviceKeyHandlerClasses" translatable="false">
    </string-array>

    <!-- Defines the sysfs attribute path used by the device
         to enable/disable DC dimming. -->
    <string name="config_deviceDcDimmingSysfsNode"></string>

    <!-- Defines the value used by the device sysfs node
         to enable DC dimming -->
    <string name="config_deviceDcDimmingEnableValue">1</string>

    <!-- Defines the value used by the device sysfs node
         to disable DC dimming -->
    <string name="config_deviceDcDimmingDisableValue">0</string>

    <!-- Whether to use Richtap vibration -->
    <bool name="config_usesRichtapVibration">false</bool>

    <!-- Build properties from a GMS certified device against current platform SPL level -->
    <string-array name="config_certifiedBuildProperties" translatable="false">
      <!--
        Each entry must be of the format
            FIELD:value
        with the field belonging to android.os.Build or android.os.Build.VERSION class.
        Example:
        <item>BRAND:foo</item>
        <item>DEVICE:bar</item>
        <item>FINGERPRINT:foo/bar/bar:1.0/lorem/ipsum:dolor/sit-amet</item>
        <item>VERSION.RELEASE:1.0</item>
      -->
    </string-array>

    <!-- Keybox configuration for device certification -->
    <string-array name="config_certifiedKeybox" translatable="false">
      <!--
        Keybox entries for EC and RSA keys and certificates.
        These should be populated with valid data for device certification.
        <item>EC.PRIV:</item>
        <item>EC.CERT_1:</item>
        <item>EC.CERT_2:</item>
        <item>EC.CERT_3:</item>
        <item>RSA.PRIV:</item>
        <item>RSA.CERT_1:</item>
        <item>RSA.CERT_2:</item>
        <item>RSA.CERT_3:</item>
      -->
    </string-array>

    <!-- Build fingerprint from stock ROM -->
    <string name="config_stockFingerprint" translatable="false"></string>

    <!-- Device model (Build.MODEL) to spoof for netflix, if not empty -->
    <string name="config_netflixSpoofModel" translatable="false"></string>

    <!-- Display color inversion availability -->
    <bool name="config_displayInversionAvailable">true</bool>

    <!-- The list of components which should be automatically disabled for a specific device.
         Note: this MUST not be used to randomly disable components, ask for approval first! -->
    <string-array name="config_deviceDisabledComponents" translatable="false">
    </string-array>

    <!-- The list of components which should be automatically disabled for all devices. -->
    <string-array name="config_globallyDisabledComponents" translatable="false">
    </string-array>

    <!-- The list of components which should be forced to be enabled. -->
    <string-array name="config_forceEnabledComponents" translatable="false">
    </string-array>

    <!-- Whether to show WiFi/Hotspot standard -->
    <bool name="config_show_network_standard">false</bool>

    <!-- Delay in ms before invoking single tap gesture
         Should be set to dt2w max time / 2 when needed -->
    <integer name="config_singleTapDelay">0</integer>

    <!-- Whether charging control should be enabled by default -->
    <bool name="config_chargingControlEnabled">false</bool>
    <!-- Default charging control mode.
         This integer should be set to:
         1 - auto - Use the alarm to calculate the time range when to activate charging control
         2 - custom - Use time range when the device is usually charging for hours
         3 - limit - Just limit charging -->
    <integer name="config_defaultChargingControlMode">1</integer>
    <!-- Default time when charging control is activated.
         Represented as seconds from midnight (e.g. 79200 == 10pm). -->
    <integer name="config_defaultChargingControlStartTime">79200</integer>
    <!-- Default time when battery will be fully charged.
         Represented as seconds from midnight (e.g. 21600 == 6am). -->
    <integer name="config_defaultChargingControlTargetTime">21600</integer>
    <!-- Default charging limit. -->
    <integer name="config_defaultChargingControlLimit">80</integer>
    <!-- Considering the fact that the system might have an incorrect estimation of the time to
         full. Set a time margin to make the device fully charged before the target time arrives.
         The unit is minutes and the default value is 30 minutes. If you find that it is not enough
         to make the device to be fully charged at the target time, increase the value
    -->
    <integer name="config_chargingControlTimeMargin">30</integer>
    <!-- For a device that cannot bypass battery when charging stops (that is, the battery current
         is 0mA when charging stops), the battery will gradually discharge. So we need to make it
         recharge when the battery level is lower than a threshold. Set this so that the device
         will be charged between (limit - val) and limit. -->
    <integer name="config_chargingControlBatteryRechargeMargin">10</integer>

    <!-- Enforce DisplayModeDirector to select user preferred resolution -->
    <bool name="config_forceToUseSelectedResolution">false</bool>

    <!-- Pocket Lock -->
    <bool name="config_pocketModeSupported">true</bool>
    <bool name="config_pocketModeLightSensorSupported">true</bool>

    <!-- Defines custom OEM sensor for pocket detection. -->
    <string name="config_pocketJudgeVendorSensorName"></string>
    <item name="config_pocketJudgeVendorSensorValue" format="float" type="dimen">1.0</item>

    <!-- Defines the sysfs attribute path used by pocket bridge
         to communicate pocket state to the pocket judge kernel driver. -->
    <string name="config_pocketBridgeSysfsInpocket"></string>

    <!-- Default value for Horizon light color (Blue) -->
    <integer name="config_AmbientPulseLightColor">0x3980FF</integer>

    <!-- Name of a font family to use as light font. For theming purpose. -->
    <string name="config_lightFontFamily" translatable="false">sans-serif-light</string>
    <!-- Name of a font family to use as regular font. For theming purpose. -->
    <string name="config_regularFontFamily" translatable="false">sans-serif-regular</string>
    <!-- Name of a font family to use as clock font. For theming purpose. -->
    <string name="config_clockFontFamilyMedium" translatable="false">sans-serif-clock</string>

    <!-- Is the battery LED intrusive? Used to decide if there should be a disable option -->
    <bool name="config_intrusiveBatteryLed">false</bool>

    <!-- Array of:
        - Path to fast charging status file
        - Delimiter ";"
        - Value if fast charging is active
        Used to detect whether an oem fast charger is active
        Example: <item>/sys/class/power_supply/battery/fastchg_status;1</item>
    -->
    <string-array name="config_oemFastChargerStatusPaths" translatable="false"></string-array>

</resources>
